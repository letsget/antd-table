{"version":3,"sources":["components/TrainingForm.jsx","components/EditableRow.jsx","components/EditableCell.jsx","components/Table.jsx","pages/StepsRecorderPage.jsx","App.js","index.js"],"names":["TrainingFormStyles","styled","div","TrainingForm","options","onAdd","Form","useForm","form","Option","Select","onFinish","formFields","resetFields","onFinishFailed","errorInfo","console","log","Item","name","rules","required","message","format","min","showSearch","style","width","placeholder","optionFilterProp","filterOption","input","option","children","toLowerCase","indexOf","map","value","nanoid","htmlType","type","EditableContext","React","createContext","EditableRow","index","props","component","Provider","EditableCell","title","editable","dataIndex","record","handleSave","restProps","useState","editing","setEditing","inputRef","useRef","useContext","useEffect","current","focus","toggleEdit","setFieldsValue","save","a","validateFields","values","childNode","margin","ref","onPressEnter","onBlur","className","paddingRight","onClick","TrainingTable","data","onDelete","onSave","components","body","row","cell","tableColumns","sorter","first","date","second","moment","unix","b","hours","align","render","text","length","onConfirm","key","DeleteOutlined","color","fontSize","col","onCell","pagination","hideOnSinglePage","rowClassName","bordered","dataSource","columns","TableForm","StepsRecorderPage","assigned","tableData","setTableData","selectOptions","setSelectOptions","fetchSelectOptions","fetch","then","json","handleAdd","trainingDate","selectOption","delete","updatedData","filter","item","newData","findIndex","splice","Container","App","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.116e5724.chunk.js","sourcesContent":["import React from \"react\";\nimport { Button, Space, DatePicker, Form, InputNumber, Select } from \"antd\";\nimport styled from \"styled-components\";\nimport { nanoid } from \"nanoid\";\n\nconst dateFormat = \"DD/MM/YYYY\";\n\nconst TrainingFormStyles = styled.div`\n  text-align: center;\n  margin-bottom: 40px;\n`;\n\nconst TrainingForm = ({ options, onAdd }) => {\n  const [form] = Form.useForm();\n\n  const { Option } = Select;\n\n  const onFinish = (formFields) => {\n    onAdd(formFields);\n    form.resetFields();\n  };\n\n  const onFinishFailed = (errorInfo) => {\n    console.log(\"Failed:\", errorInfo);\n  };\n\n  return (\n    <TrainingFormStyles>\n      <Form form={form} onFinish={onFinish} onFinishFailed={onFinishFailed}>\n        <Space>\n          <Form.Item\n            name=\"trainingDate\"\n            rules={[{ required: true, message: \"Please enter a valid date\" }]}\n          >\n            <DatePicker format={dateFormat} />\n          </Form.Item>\n          <Form.Item\n            name=\"hours\"\n            rules={[{ required: true, message: \"Please enter hours\" }]}\n          >\n            <InputNumber min={1} />\n          </Form.Item>\n          <Form.Item\n            name=\"selectOption\"\n            rules={[{ required: true, message: \"Please assign someone\" }]}\n          >\n            <Select\n              showSearch\n              style={{ width: 200 }}\n              placeholder=\"Select a person\"\n              optionFilterProp=\"children\"\n              filterOption={(input, option) =>\n                option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\n              }\n            >\n              {options &&\n                options.map((name) => (\n                  <Option key={nanoid()} value={name}>\n                    {name}\n                  </Option>\n                ))}\n            </Select>\n          </Form.Item>\n          <Form.Item>\n            <Button htmlType=\"submit\" type=\"primary\">\n              Add\n            </Button>\n          </Form.Item>\n        </Space>\n      </Form>\n    </TrainingFormStyles>\n  );\n};\n\nexport default TrainingForm;\n","import React from \"react\";\nimport { Form } from \"antd\";\nexport const EditableContext = React.createContext();\n\nconst EditableRow = ({ index, ...props }) => {\n  const [form] = Form.useForm();\n  return (\n    <Form form={form} component={false}>\n      <EditableContext.Provider value={form}>\n        <tr {...props} />\n      </EditableContext.Provider>\n    </Form>\n  );\n};\n\nexport default EditableRow;\n","import React, { useRef, useEffect, useState, useContext } from \"react\";\nimport { EditableContext } from \"./EditableRow\";\nimport { Form, Input } from \"antd\";\n\nconst EditableCell = ({\n  title,\n  editable,\n  children,\n  dataIndex,\n  record,\n  handleSave,\n  ...restProps\n}) => {\n  const [editing, setEditing] = useState(false);\n  const inputRef = useRef();\n\n  const form = useContext(EditableContext);\n\n  useEffect(() => {\n    if (editing) {\n      inputRef.current.focus();\n    }\n  }, [editing]);\n\n  const toggleEdit = () => {\n    setEditing(!editing);\n    form.setFieldsValue({\n      [dataIndex]: record[dataIndex],\n    });\n  };\n\n  const save = async () => {\n    try {\n      const values = await form.validateFields();\n      toggleEdit();\n      handleSave({ ...record, ...values });\n    } catch (errInfo) {\n      console.log(\"Save failed:\", errInfo);\n    }\n  };\n\n  let childNode = children;\n\n  if (editable) {\n    childNode = editing ? (\n      <Form.Item\n        style={{\n          margin: 0,\n        }}\n        name={dataIndex}\n        rules={[\n          {\n            required: true,\n            message: `${title} is required.`,\n          },\n        ]}\n      >\n        <Input ref={inputRef} onPressEnter={save} onBlur={save} />\n      </Form.Item>\n    ) : (\n      <div\n        className=\"editable-cell-value-wrap\"\n        style={{\n          paddingRight: 24,\n        }}\n        onClick={toggleEdit}\n      >\n        {children}\n      </div>\n    );\n  }\n\n  return <td {...restProps}>{childNode}</td>;\n};\n\nexport default EditableCell;\n","import React from \"react\";\nimport \"antd/dist/antd.css\";\nimport { Table, Popconfirm } from \"antd\";\nimport EditableRow from \"./EditableRow\";\nimport EditableCell from \"./EditableCell\";\nimport moment from \"moment\";\nimport { DeleteOutlined } from \"@ant-design/icons\";\n\nconst TrainingTable = ({ data, onDelete, onSave }) => {\n  const columns = [\n    {\n      title: \"date\",\n      dataIndex: \"date\",\n      sorter: ({ date: first }, { date: second }) => {\n        return (\n          moment(first, \"DD-MM-YYYY\").unix() -\n          moment(second, \"DD-MM-YYYY\").unix()\n        );\n      },\n      width: \"20%\",\n      editable: true,\n    },\n    {\n      title: \"hours\",\n      dataIndex: \"hours\",\n      sorter: (a, b) => a.hours - b.hours,\n      width: \"10%\",\n      editable: true,\n    },\n    {\n      title: \"assigned to\",\n      dataIndex: \"assigned\",\n      width: \"30%\",\n      editable: true,\n    },\n    {\n      title: \"operation\",\n      dataIndex: \"operation\",\n      width: \"5%\",\n      align: \"center\",\n      render: (text, record) =>\n        data.length >= 1 ? (\n          <Popconfirm\n            title=\"Sure to delete?\"\n            onConfirm={() => onDelete(record.key)}\n          >\n            <DeleteOutlined style={{ color: \"#d11a2a\", fontSize: \"1.1rem\" }} />\n          </Popconfirm>\n        ) : null,\n    },\n  ];\n\n  const components = {\n    body: {\n      row: EditableRow,\n      cell: EditableCell,\n    },\n  };\n  const tableColumns = columns.map((col) => {\n    if (!col.editable) {\n      return col;\n    }\n\n    return {\n      ...col,\n      onCell: (record) => ({\n        record,\n        editable: col.editable,\n        dataIndex: col.dataIndex,\n        title: col.title,\n        handleSave: onSave,\n      }),\n    };\n  });\n\n  return (\n    <Table\n      pagination={{ hideOnSinglePage: true }}\n      components={components}\n      rowClassName={() => \"editable-row\"}\n      bordered\n      dataSource={data}\n      columns={tableColumns}\n    />\n  );\n};\n\nexport default TrainingTable;\n","import React, { useState, useEffect } from \"react\";\nimport TrainingForm from \"../components/TrainingForm\";\nimport TrainingTable from \"../components/Table\";\nimport { nanoid } from \"nanoid\";\nimport styled from \"styled-components\";\nimport moment from \"moment\";\nimport { Button } from \"antd\";\nimport { DeleteOutlined } from \"@ant-design/icons\";\n\nconst TableForm = styled.div`\n  max-width: 700px;\n  margin: 100px auto;\n`;\n\nconst StepsRecorderPage = () => {\n  const [tableData, setTableData] = useState([\n    {\n      key: \"0\",\n      date: \"20-04-2006\",\n      hours: \"34\",\n      assigned: \"Artem Katz\",\n    },\n    {\n      key: \"1\",\n      date: \"20-04-2012\",\n      hours: \"27\",\n      assigned: \"Basrov Konstantin\",\n    },\n    {\n      key: \"2\",\n      date: \"20-04-2008\",\n      hours: \"14\",\n      assigned: \"Frostov Kirill\",\n    },\n  ]);\n\n  const [selectOptions, setSelectOptions] = useState([\n    \"Bazrov Konstantin\",\n    \"Artem Katz\",\n    \"Kirill Frostov\",\n    \"Sergey Mochalov\",\n    \"David Getz\",\n  ]);\n\n  const fetchSelectOptions = async () => {\n    try {\n      const options = await fetch(\n        \"https://jsonplaceholder.typicode.com/users\"\n      ).then((options) => options.json());\n      setSelectOptions([\n        ...selectOptions,\n        ...options.map((option) => option.name),\n      ]);\n    } catch (e) {\n      console.log(\"an error occured\");\n    }\n  };\n\n  useEffect(() => {\n    fetchSelectOptions();\n  }, []);\n\n  const handleDelete = (key) => {\n    const updatedData = tableData.filter((item) => item.key !== key);\n    setTableData(updatedData);\n  };\n\n  const handleSave = (row) => {\n    const newData = [...tableData];\n    const index = newData.findIndex((item) => row.key === item.key);\n    const item = newData[index];\n    newData.splice(index, 1, { ...item, ...row });\n\n    setTableData(newData);\n  };\n\n  const handleAdd = ({ hours, trainingDate, selectOption }) => {\n    setTableData([\n      ...tableData,\n      {\n        key: nanoid(),\n        date: moment(trainingDate).format(\"DD-MM-YYYY\"),\n        hours: hours,\n        assigned: selectOption,\n        delete: (\n          <Button type=\"primary\">\n            <DeleteOutlined />\n          </Button>\n        ),\n      },\n    ]);\n  };\n\n  return (\n    <TableForm>\n      <TrainingForm onAdd={handleAdd} options={selectOptions} />\n      <TrainingTable\n        data={tableData}\n        onDelete={handleDelete}\n        onSave={handleSave}\n        onAdd={handleAdd}\n      />\n    </TableForm>\n  );\n};\n\nexport default StepsRecorderPage;\n","import React from \"react\";\nimport \"./App.css\";\nimport \"antd/dist/antd.css\";\nimport styled from \"styled-components\";\nimport StepsRecorderPage from \"./pages/StepsRecorderPage\";\n\nconst Container = styled.div`\n  max-width: 1170px;\n  padding-left: 15px;\n  padding-right: 15px;\n  margin: 0 auto;\n`;\n\nconst App = () => {\n  return (\n    <Container>\n      <StepsRecorderPage />\n    </Container>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}